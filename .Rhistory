meta <- readRDS('/Users/bocsar000/Downloads/meta.rds')
meta
write.csv(meta, "/Users/bocsar000/Downloads/meta.csv")
load("/Users/bocsar000/Downloads/meta.rds")
load("/Users/bocsar000/Downloads/covars.rda")
speech_order <- readRDS("/Users/bocsar000/Downloads/speech_order.rds")
speech_order
me
mu
tail(mu)
load("/Users/bocsar000/Downloads/covars.rda")
write.csv(U, '/Users/bocsar000/Documents/projects/polarization/data/U_gentz.csv')
write.csv(as.matrix(U), '/Users/bocsar000/Documents/projects/polarization/data/U_gentz.csv')
# Reading matrices from CSV files
U_gentz <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_gentz.csv", row.names = 1))
U_matrix <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_matrix.csv", row.names = 1))
# Finding what's missing in columns
mis_U_gentz = colnames(U_matrix)[!colnames(U_matrix) %in% colnames(U_gentz)]
mis_U_matrix = colnames(U_gentz)[!colnames(U_gentz) %in% colnames(U_matrix)]
# Creating missing columns as sparse matrices
mis_U_gentz_cols = Matrix(0, nrow = nrow(U_gentz), length(mis_U_gentz))
colnames(mis_U_gentz_cols) = mis_U_gentz
mis_U_matrix_cols = Matrix(0, nrow = nrow(U_matrix), length(mis_U_matrix))
colnames(mis_U_matrix_cols) = mis_U_matrix
# Adding missing columns to initial matrices
U_gentz_n = cbind(U_gentz, mis_U_gentz_cols)
U_matrix_n = cbind(U_matrix, mis_U_matrix_cols)[, colnames(U_gentz_n), drop = FALSE]
# Final row bind
result_matrix = rbind(U_gentz_n, U_matrix_n)
# Convert the result to a dgCMatrix object if it's not already
result_matrix = as(result_matrix, "dgCMatrix")
# Printing the result (optional)
print(result_matrix)
# Reading matrices from CSV files
U_gentz <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_gentz.csv", row.names = 1))
U_matrix <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_matrix.csv", row.names = 1))
# Finding what's missing in columns
mis_U_gentz = colnames(U_matrix)[!colnames(U_matrix) %in% colnames(U_gentz)]
mis_U_matrix = colnames(U_gentz)[!colnames(U_gentz) %in% colnames(U_matrix)]
# Creating missing columns as sparse matrices
mis_U_gentz_cols = Matrix(0, nrow = nrow(U_gentz), length(mis_U_gentz))
colnames(mis_U_gentz_cols) = mis_U_gentz
mis_U_matrix_cols = Matrix(0, nrow = nrow(U_matrix), length(mis_U_matrix))
colnames(mis_U_matrix_cols) = mis_U_matrix
# Adding missing columns to initial matrices
U_gentz_n = cbind(U_gentz, mis_U_gentz_cols)
U_matrix_n = cbind(U_matrix, mis_U_matrix_cols)[, colnames(U_gentz_n), drop = FALSE]
# Final row bind
result_matrix = rbind(U_gentz_n, U_matrix_n)
# Convert the result to a dgCMatrix object if it's not already
result_matrix = as(result_matrix, "dgCMatrix")
# Printing the result (optional)
print(result_matrix)
# Printing the result (optional)
colnames(results_matrix)
# Convert the result to a dgCMatrix object if it's not already
result_matrix = as(result_matrix, "dgCMatrix")
# Printing the result (optional)
colnames(result_matrix)
# Reading matrices from CSV files
U_gentz <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_gentz.csv", row.names = 1))
U_matrix <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_matrix.csv", row.names = 1))
# Finding what's missing in columns
mis_U_gentz = colnames(U_matrix)[!colnames(U_matrix) %in% colnames(U_gentz)]
mis_U_matrix = colnames(U_gentz)[!colnames(U_gentz) %in% colnames(U_matrix)]
# Creating missing columns as sparse matrices
mis_U_gentz_cols = Matrix(0, nrow = nrow(U_gentz), length(mis_U_gentz))
colnames(mis_U_gentz_cols) = mis_U_gentz
mis_U_matrix_cols = Matrix(0, nrow = nrow(U_matrix), length(mis_U_matrix))
colnames(mis_U_matrix_cols) = mis_U_matrix
# Adding missing columns to initial matrices
U_gentz_n = cbind(U_gentz, mis_U_gentz_cols)
U_matrix_n = cbind(U_matrix, mis_U_matrix_cols)[, colnames(U_gentz_n), drop = FALSE]
# Final row bind
result_matrix = rbind(U_gentz_n, U_matrix_n)
# Convert the result to a dgCMatrix object if it's not already
result_matrix = as(result_matrix, "dgCMatrix")
# Printing the result (optional)
colnames(result_matrix)
colnames(U)
load("/Users/bocsar000/Downloads/covars.rda")
load("/Users/bocsar000/Documents/projects/polarization/data/covars.rda")
U
colnames(U)
colnames(U)
getcwd()
wd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/bocsar000/Documents/projects/scopus_scrape')
getwd()
library(igraph)
# Load data
setwd('/Users/bocsar000/Documents/projects/scopus_scrape')
node_attributes <- read.csv("data/node_attributes.csv", stringsAsFactors = FALSE)
library(igraph)
# Load data
setwd('/Users/bocsar000/Documents/projects/scopus_scrape/')
node_attributes <- read.csv("data/node_attributes.csv", stringsAsFactors = FALSE)
node_attributes <- read.csv("/Users/bocsar000/Documents/projects/scopus_scrape/data/node_attributes.csv", stringsAsFactors = FALSE)
node_attributes <- read.csv("node_covars.csv", stringsAsFactors = FALSE)
node_attributes <- read.csv("data/node_covars.csv", stringsAsFactors = FALSE)
library(igraph)
# Load data
setwd('/Users/bocsar000/Documents/projects/scopus_scrape/')
node_attributes <- read.csv("data/node_covars.csv", stringsAsFactors = FALSE)
edge_list <- read.csv("data/edge_list.csv", stringsAsFactors = FALSE)
# Create a graph from the edge list
g <- graph_from_data_frame(d=edge_list, directed=TRUE)
library(igraph)
# Load data
setwd('/Users/bocsar000/Documents/projects/scopus_scrape/')
node_attributes <- read.csv("data/node_covars.csv", stringsAsFactors = FALSE)
edge_list <- read.csv("data/edge_list.csv", stringsAsFactors = FALSE)
# Create a graph from the edge list
g <- graph_from_data_frame(d=edge_list, directed=TRUE)
# Set the node attributes. Assuming the nodes are identified by a column named 'id'
for (attribute_name in names(node_attributes)[-1]) { # Skip the first column which is 'id'
V(g)[node_attributes$id][attribute_name] <- node_attributes[, attribute_name]
}
# Set the node attributes. Assuming the nodes are identified by a column named 'id'
for (attribute_name in names(node_attributes)[-1]) { # Skip the first column which is 'id'
V(g)[node_attributes$eid][attribute_name] <- node_attributes[, attribute_name]
}
node_attributes
colnames(node_attributes)
for (attribute_name in names(node_attributes)[-2]) { # Skip the first two columns, 'attribute_name' and 'node_id'
V(g)$attributes[[attribute_name]] <- node_attributes[node_attributes[, 2] %in% V(g)$name, attribute_name]
}
head(node_attributes)
for (attribute_name in names(node_attributes)[-1]) {
V(g)[match(node_attributes$eid, V(g)$name)][attribute_name] <- node_attributes[, attribute_name]
}
for (attribute_name in names(node_attributes)[-1]) {
# Find which eids are present in the graph
valid_eids <- node_attributes$eid %in% vertex_names
# Subset the node_attributes to only include valid eids
valid_attributes <- node_attributes[valid_eids, ]
# Use match to find the index of the node_attributes' eid in the graph's vertex names
index_in_graph <- match(valid_attributes$eid, vertex_names)
# Assign each attribute to the vertices in the graph
V(g)[index_in_graph][attribute_name] <- valid_attributes[, attribute_name]
}
library(igraph)
# Load data
setwd('/Users/bocsar000/Documents/projects/scopus_scrape/')
node_attributes <- read.csv("data/node_covars.csv", stringsAsFactors = FALSE)
edge_list <- read.csv("data/edge_list.csv", stringsAsFactors = FALSE)
# Create a graph from the edge list
g <- graph_from_data_frame(d=edge_list, directed=TRUE)
vertex_names <- V(g)$name
for (attribute_name in names(node_attributes)[-1]) {
# Find which eids are present in the graph
valid_eids <- node_attributes$eid %in% vertex_names
# Subset the node_attributes to only include valid eids
valid_attributes <- node_attributes[valid_eids, ]
# Use match to find the index of the node_attributes' eid in the graph's vertex names
index_in_graph <- match(valid_attributes$eid, vertex_names)
# Assign each attribute to the vertices in the graph
V(g)[index_in_graph][attribute_name] <- valid_attributes[, attribute_name]
}
library(igraph)
# Load data
setwd('/Users/bocsar000/Documents/projects/scopus_scrape/')
node_attributes <- na.omit(read.csv("data/node_covars.csv", stringsAsFactors = FALSE))
edge_list <- read.csv("data/edge_list.csv", stringsAsFactors = FALSE)
# Create a graph from the edge list
g <- graph_from_data_frame(d=edge_list, directed=TRUE)
vertex_names <- V(g)$name
for (attribute_name in names(node_attributes)[-1]) {
# Find which eids are present in the graph
valid_eids <- node_attributes$eid %in% vertex_names
# Subset the node_attributes to only include valid eids
valid_attributes <- node_attributes[valid_eids, ]
# Use match to find the index of the node_attributes' eid in the graph's vertex names
index_in_graph <- match(valid_attributes$eid, vertex_names)
# Assign each attribute to the vertices in the graph
V(g)[index_in_graph][attribute_name] <- valid_attributes[, attribute_name]
}
g
plot(g)
# Reading matrices from CSV files
U_gentz <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_gentz.csv", row.names = 1))
colnames(U_gentz)
# Finding what's missing in columns
mis_U_gentz = colnames(U_matrix)[!colnames(U_matrix) %in% colnames(U_gentz)]
library(Matrix)
# Reading matrices from CSV files
U_gentz <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_gentz.csv", row.names = 1))
U_matrix <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_matrix.csv", row.names = 1))
# Finding what's missing in columns
mis_U_gentz = colnames(U_matrix)[!colnames(U_matrix) %in% colnames(U_gentz)]
mis_U_matrix = colnames(U_gentz)[!colnames(U_gentz) %in% colnames(U_matrix)]
# Creating missing columns as sparse matrices
mis_U_gentz_cols = Matrix(0, nrow = nrow(U_gentz), length(mis_U_gentz))
colnames(mis_U_gentz_cols) = mis_U_gentz
mis_U_matrix_cols = Matrix(0, nrow = nrow(U_matrix), length(mis_U_matrix))
colnames(mis_U_matrix_cols) = mis_U_matrix
# Adding missing columns to initial matrices
U_gentz_n = cbind(U_gentz, mis_U_gentz_cols)
U_matrix_n = cbind(U_matrix, mis_U_matrix_cols)[, colnames(U_gentz_n), drop = FALSE]
# Final row bind
result_matrix = rbind(U_gentz_n, U_matrix_n)
# Convert the result to a dgCMatrix object if it's not already
result_matrix = as(result_matrix, "dgCMatrix")
# Printing the result (optional)
colnames(result_matrix)
merge_matrices <- function(mat1, mat2) {
# Finding what's missing in columns
mis_mat1 = setdiff(colnames(mat2), colnames(mat1))
mis_mat2 = setdiff(colnames(mat1), colnames(mat2))
# Creating missing columns as zero matrices
if (length(mis_mat1) > 0) {
mis_mat1_cols = matrix(0, nrow = nrow(mat1), ncol = length(mis_mat1))
colnames(mis_mat1_cols) = mis_mat1
mat1 = cbind(mat1, mis_mat1_cols)
}
if (length(mis_mat2) > 0) {
mis_mat2_cols = matrix(0, nrow = nrow(mat2), ncol = length(mis_mat2))
colnames(mis_mat2_cols) = mis_mat2
mat2 = cbind(mat2, mis_mat2_cols)
}
# Aligning columns of mat2 to match mat1
mat2 = mat2[, colnames(mat1), drop = FALSE]
# Final row bind
result_matrix = rbind(mat1, mat2)
return(result_matrix)
}
merge_matrices(U_gentz, U_matrix)
colnames(merge_matrices(U_gentz, U_matrix))
library(Matrix)
merge_matrices <- function(mat1, mat2) {
# Finding what's missing in columns
mis_mat1 = setdiff(colnames(mat2), colnames(mat1))
mis_mat2 = setdiff(colnames(mat1), colnames(mat2))
# Creating missing columns as zero matrices
if (length(mis_mat1) > 0) {
mis_mat1_cols = matrix(0, nrow = nrow(mat1), ncol = length(mis_mat1))
colnames(mis_mat1_cols) = mis_mat1
mat1 = cbind(mat1, mis_mat1_cols)
}
if (length(mis_mat2) > 0) {
mis_mat2_cols = matrix(0, nrow = nrow(mat2), ncol = length(mis_mat2))
colnames(mis_mat2_cols) = mis_mat2
mat2 = cbind(mat2, mis_mat2_cols)
}
# Aligning columns of mat2 to match mat1
mat2 = mat2[, colnames(mat1), drop = FALSE]
# Final row bind
result_matrix = rbind(mat1, mat2)
return(result_matrix)
}
# Reading matrices from CSV files
U_gentz <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_gentz.csv", row.names = 1))
U_matrix <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_matrix.csv", row.names = 1))
U = as(merge_matrices(U_gentz, U_matrix), "dgCMatrix")
# Printing the result (optional)
colnames(U)
load('/Users/bocsar000/Documents/projects/polarization/data/covars.rda')
library(Matrix)
load('/Users/bocsar000/Documents/projects/polarization/data/covars.rda')
merge_matrices <- function(mat1, mat2) {
# Finding what's missing in columns
mis_mat1 = setdiff(colnames(mat2), colnames(mat1))
mis_mat2 = setdiff(colnames(mat1), colnames(mat2))
# Creating missing columns as zero matrices
if (length(mis_mat1) > 0) {
mis_mat1_cols = matrix(0, nrow = nrow(mat1), ncol = length(mis_mat1))
colnames(mis_mat1_cols) = mis_mat1
mat1 = cbind(mat1, mis_mat1_cols)
}
if (length(mis_mat2) > 0) {
mis_mat2_cols = matrix(0, nrow = nrow(mat2), ncol = length(mis_mat2))
colnames(mis_mat2_cols) = mis_mat2
mat2 = cbind(mat2, mis_mat2_cols)
}
# Aligning columns of mat2 to match mat1
mat2 = mat2[, colnames(mat1), drop = FALSE]
# Final row bind
result_matrix = rbind(mat1, mat2)
return(result_matrix)
}
U_matrix <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_matrix.csv", row.names = 1))
U_new = as(merge_matrices(U, U_matrix), "dgCMatrix")
VarInt <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/VarInt.csv", row.names = 1))
RSnosmooth_new = merge_matrices(RS_nosmooth, VarInt)
RSnosmooth_new = merge_matrices(RSnosmooth, VarInt)
colnames(RSnosmooth_new)
collapse_matrix <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/sfun_collapse.csv", row.names = 1))
sfun_nosmooth_new = merge_matrices(sfun_nosmooth, collapse_matrix)
RSnosmooth_new = as.matrix(merge_matrices(RSnosmooth, VarInt))
sfun_nosmooth_new = as.matrix(merge_matrices(sfun_nosmooth, collapse_matrix))
sfun_nosmooth_new = as.matrix(merge_matrices(sfun_nosmooth, collapse_matrix))
sfun_nosmooth_new
tail(sfun_nosmooth_new)
tail(RSnosmooth_new)
tail(U_new)
colnames(U_new)
library(Matrix)
load('/Users/bocsar000/Documents/projects/polarization/data/covars.rda')
RSnosmooth
sfun_nosmooth
mu
library(Matrix)
load('/Users/bocsar000/Documents/projects/polarization/data/covars.rda')
merge_matrices <- function(mat1, mat2) {
# Finding what's missing in columns
mis_mat1 = setdiff(colnames(mat2), colnames(mat1))
mis_mat2 = setdiff(colnames(mat1), colnames(mat2))
# Creating missing columns as zero matrices
if (length(mis_mat1) > 0) {
mis_mat1_cols = matrix(0, nrow = nrow(mat1), ncol = length(mis_mat1))
colnames(mis_mat1_cols) = mis_mat1
mat1 = cbind(mat1, mis_mat1_cols)
}
if (length(mis_mat2) > 0) {
mis_mat2_cols = matrix(0, nrow = nrow(mat2), ncol = length(mis_mat2))
colnames(mis_mat2_cols) = mis_mat2
mat2 = cbind(mat2, mis_mat2_cols)
}
# Aligning columns of mat2 to match mat1
mat2 = mat2[, colnames(mat1), drop = FALSE]
# Final row bind
result_matrix = rbind(mat1, mat2)
return(result_matrix)
}
U_matrix <- as.matrix(read.csv("/Users/bocsar000/Documents/projects/polarization/data/U_matrix.csv", row.names = 1))
U_new = as(merge_matrices(U, U_matrix), "dgCMatrix")
head(U_matrix)
colnames(U)
View(RSfake_nosmooth)
library(Matrix)
load('/Users/bocsar000/Documents/projects/polarization/data/covars.rda')
merge_matrices <- function(mat1, mat2) {
# Finding what's missing in columns
mis_mat1 = setdiff(colnames(mat2), colnames(mat1))
mis_mat2 = setdiff(colnames(mat1), colnames(mat2))
# Creating missing columns as zero matrices
if (length(mis_mat1) > 0) {
mis_mat1_cols = matrix(0, nrow = nrow(mat1), ncol = length(mis_mat1))
colnames(mis_mat1_cols) = mis_mat1
mat1 = cbind(mat1, mis_mat1_cols)
}
if (length(mis_mat2) > 0) {
mis_mat2_cols = matrix(0, nrow = nrow(mat2), ncol = length(mis_mat2))
colnames(mis_mat2_cols) = mis_mat2
mat2 = cbind(mat2, mis_mat2_cols)
}
# Aligning columns of mat2 to match mat1
mat2 = mat2[, colnames(mat1), drop = FALSE]
# Final row bind
result_matrix = rbind(mat1, mat2)
return(result_matrix)
}
mu <- read.csv("/Users/bocsar000/Documents/projects/polarization/data/mu.csv")$mu
mu
mu_ext <- read.csv("/Users/bocsar000/Documents/projects/polarization/data/mu.csv")$mu
load('/Users/bocsar000/Documents/projects/polarization/data/covars.rda')
mu_new = c(mu, mu_ext)
install.packages("igraph")
library(igraph)
library(igraph)
setwd('/Users/bocsar000/Documents/projects/scopus_scrape')
# Replace 'path/to/your/nodes.csv' and 'path/to/your/edges.csv' with the actual file paths
nodes <- read.csv("data/network/node_list.csv")
edges <- read.csv("data/network/edge_list.csv")
# Create a graph from the edge list
g <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
# Replace 'path/to/your/nodes.csv' and 'path/to/your/edges.csv' with the actual file paths
nodes <- read.csv("data/network/node_list.csv")
edges <- read.csv("data/network/edge_list.csv")
# Create a graph from the edge list
g <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
plot(g, vertex.label=V(g)$name, vertex.size=10, edge.arrow.size=.5)
# Replace 'path/to/your/nodes.csv' and 'path/to/your/edges.csv' with the actual file paths
nodes <- read.csv("data/network/node_list.csv")
edges <- read.csv("data/network/edge_list.csv")
# Create a graph from the edge list
g <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
# Replace 'path/to/your/nodes.csv' and 'path/to/your/edges.csv' with the actual file paths
nodes <- read.csv("data/network/node_list.csv")
edges <- read.csv("data/network/edge_list.csv")
nodes
head(nodes)
colnames(nodes)
# Replace 'path/to/your/nodes.csv' and 'path/to/your/edges.csv' with the actual file paths
nodes <- read.csv("data/network/node_list.csv")
edges <- read.csv("data/network/edge_list.csv")
# Create a graph from the edge list
g <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
# Create a graph from the edge list
g <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
plot(g, vertex.label=V(g)$name, vertex.size=10, edge.arrow.size=.5)
library(igraph)
setwd('/Users/bocsar000/Documents/projects/scopus_scrape')
# Replace 'path/to/your/nodes.csv' and 'path/to/your/edges.csv' with the actual file paths
nodes <- read.csv("data/network/node_list.csv")
edges <- read.csv("data/network/edge_list.csv")
# Create a graph from the edge list
g <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
colnames(nodes)
# move column name to first position
nodes <- nodes[,c(2,1)]
colnames(nodes)
# Replace 'path/to/your/nodes.csv' and 'path/to/your/edges.csv' with the actual file paths
nodes <- read.csv("data/network/node_list.csv")
# Replace 'path/to/your/nodes.csv' and 'path/to/your/edges.csv' with the actual file paths
nodes <- read.csv("data/network/node_list.csv")
colnames(nodes)
# Create a graph from the edge list
g <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
plot(g, vertex.label=V(g)$name, vertex.size=10, edge.arrow.size=.5)
plot(g, vertex.size=10, edge.arrow.size=.5)
plot(g, vertex.label=NULL, vertex.size=10, edge.arrow.size=.5)
# Plot the graph
plot(g, vertex.size=5, vertex.label=NA, edge.arrow.size=0.5, edge.curved=0.1, edge.width=0.5, layout=layout_with_fr(g))
# Plot the graph
plot(g, vertex.size=5, vertex.label=NA, edge.arrow.size=0.5, edge.curved=0.1, edge.width=0.5)
# Plot the graph
plot(g, vertex.size=1, vertex.label=NA, edge.arrow.size=0.5, edge.curved=0.1, edge.width=0.5)
# Plot the graph
plot(g, vertex.size=1, vertex.label=NA, edge.arrow.size=0.5, edge.curved=0.1, edge.width=0.5, layout=layout_with_fr(g))
# Plot the graph
plot(g, vertex.size=1, vertex.label=NA, edge.arrow.size=0.5, edge.curved=0.1, edge.width=0.5)
# Plot the graph
plot(g, vertex.size=0.5, vertex.label=NA, edge.arrow.size=0, edge.curved=0.1, edge.width=1)
edges
communities <- cluster_louvain(g)
# Step 2: Choose the Fruchterman-Reingold layout, applying it with the community structure in mind
layout <- layout_with_fr(g)
# Visualize the graph with the layout
plot(g, layout=layout, vertex.size=10, edge.arrow.size=.5,
vertex.color=membership(communities), # Color nodes based on their community
main="Graph Visualization with Clusters")
# Visualize the graph with the layout
plot(g, layout=layout, vertex.size=0.5, edge.arrow.size=.5, vertex.label=NA, # Set vertex size and edge arrow size
vertex.color=membership(communities), # Color nodes based on their community
main="Graph Visualization with Clusters")
# Visualize the graph with the layout
plot(g, layout=layout, vertex.size=2, edge.arrow.size=.5, vertex.label=NA, # Set vertex size and edge arrow size
vertex.color=membership(communities), # Color nodes based on their community
main="Graph Visualization with Clusters")
# Visualize the graph with the layout
plot(g, vertex.size=2, edge.arrow.size=.5, vertex.label=NA, # Set vertex size and edge arrow size
vertex.color=membership(communities), # Color nodes based on their community
main="Graph Visualization with Clusters")
table(membership(communities))
degree(g)
# Find nodes with degree > 0 (not isolated)
non_isolated_nodes <- V(g)[degree(g) > 0]
# Create a subgraph with non-isolated nodes only
g_sub <- induced_subgraph(g, non_isolated_nodes)
# Now, plot the subgraph using your preferred layout
plot(g_sub, layout=layout_with_fr(g_sub), main="Network without Isolated Nodes")
# Now, plot the subgraph using your preferred layout
plot(g_sub, vertex.label=NA,  main="Network without Isolated Nodes")
# Now, plot the subgraph using your preferred layout
plot(g_sub, vertex.label=NA, vertex.size=2  , main="Network without Isolated Nodes")
# Now, plot the subgraph using your preferred layout
plot(g_sub, vertex.label=NA, vertex.size=2, layout=layout_with_fr(g_sub), main="Network without Isolated Nodes")
non_isolated_nodes
non_iso_communities <- cluster_louvain(g_sub)
membership(non_iso_communities)
table(membership(non_iso_communities))
